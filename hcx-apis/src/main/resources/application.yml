logging:
  level:
    org.swasth.hcx: DEBUG

#kafka config
bootstrap-servers: ${bootstrap_servers:localhost:9092}

env: local

server:
  port: ${SERVER_PORT:8080}

kafka:
  topic:
    payload: ${kafka_payload_topic:${env}.hcx.request.payload}
    coverageeligibility: ${kafka_coverageeligibility_topic:${env}.hcx.protocol.request.processor}
    preauth: ${kafka_preauth_topic:${env}.hcx.protocol.request.processor}
    claim: ${kafka_claim_topic:${env}.hcx.protocol.request.processor}
    payment: ${kafka_payment_topic:${env}.hcx.protocol.request.processor}
    status: ${kafka_status_topic:${env}.hcx.request.status.search}
    search: ${kafka_search_topic:${env}.hcx.request.search}
    searchresponse: ${kafka_search_response_topic:${env}.hcx.response.search}
    communication: ${kafka_communication_topic:${env}.hcx.request.communication}
    predetermination: ${kafka_predetermination_topic:${env}.hcx.request.predetermination}
    notification: ${kafka_notification_topic:${env}.hcx.request.notification}
    subscription: ${kafka_subscription_topic:${env}.hcx.request.subscription}
    audit: ${kafka_audit_topic:${env}.hcx.audit}
    onsubscription: ${kafka_onsubscription_topic:${env}.hcx.request.onsubscription}
    retry: ${kafka_retry_topic:${env}.hcx.request.retry}
    fetch: ${kafka_fetch_topic:${env}.hcx.request.fetch}
    message: ${kafka_message_topic:${env}.hcx.request.message}


registry:
  basePath: ${registry_basePath:http://aa5c04ed467c04ea89789cead03e4275-320353178.ap-south-1.elb.amazonaws.com:8081}
  hcxcode: ${registry_hcxcode:1-d2d56996-1b77-4abb-b9e9-0e6e7343c72e}
  organisation-api-path: ${registry_api_path:/api/v1/Organisation}
  user-api-path: ${registry_user_api_path:/api/v1/User}

participantCode:
  fieldSeparator: ${participant_code_field_separator:_}

#postgres config
postgres:
  url: ${postgres_url:jdbc:postgresql://localhost:5432/postgres}
  user: ${postgres_user:postgres}
  password: ${postgres_password:postgres}
  tablename: ${postgres_tablename:payload}
  onboardingTable: ${onboarding_table:onboarding}
  onboardingOtpTable : ${onboarding_otp:onboarding_otp}
  subscription:
    tablename: ${postgres_subscription_tablename:subscription}
    insertQuery: ${postgres_subscription_insertQuery:INSERT INTO %s as sub(subscription_id,subscription_request_id,topic_code,sender_code,recipient_code,subscription_status,lastUpdatedOn,createdOn,expiry,is_delegated) VALUES ('%s','%s','%s','%s','%s','%s',%d,%d,%d,%s) ON CONFLICT ON CONSTRAINT subscription_pkey DO UPDATE SET subscription_status='%s',lastUpdatedOn=%d,expiry=%d,is_delegated=%s WHERE sub.sender_code=EXCLUDED.sender_code AND sub.topic_code=EXCLUDED.topic_code AND sub.recipient_code=EXCLUDED.recipient_code RETURNING sub.subscription_id}
    subscriptionQuery: ${postgres_subscription_subscriptionQuery:SELECT subscription_id,subscription_request_id,subscription_status,topic_code,sender_code,recipient_code,expiry,is_delegated FROM %s WHERE recipient_code = '%s'}
    subscriptionSelectQuery: ${postgres_subscription_subscriptionSelectQuery:SELECT subscription_id,subscription_request_id,subscription_status,topic_code,sender_code,recipient_code,expiry,is_delegated FROM %s WHERE subscription_id = '%s' AND sender_code = '%s' }
    updateSubscriptionQuery: ${postgres_subscription_updateSubscriptionQuery:UPDATE %s SET subscription_status = '%s'  WHERE subscription_id = '%s' RETURNING %s }


#hcx error headers
plainrequest:
  headers:
    mandatory: ${error_mandatory_headers:x-hcx-status, x-hcx-sender_code, x-hcx-recipient_code, x-hcx-error_details, x-hcx-correlation_id, x-hcx-api_call_id, x-hcx-timestamp}
    optional: ${error_optional_headers:x-hcx-workflow_id}

#hcx headers
protocol:
  headers:
    mandatory: ${protocol_mandatory_headers:x-hcx-sender_code, x-hcx-recipient_code, x-hcx-api_call_id, x-hcx-timestamp, x-hcx-status, x-hcx-correlation_id}
    optional: ${protocol_optional_headers:x-hcx-workflow_id, x-hcx-debug_flag, x-hcx-error_details, x-hcx-debug_details}
headers:
  jose: ${jose_headers:alg, enc}

allowedEntitiesForStatusSearch: ${allowed_entities_for_status_search:coverageeligibility, preauth, claim, predetermination}

#elasticsearch config
es:
  host: ${es_host:localhost}
  port: ${es_port:9200}
  user-index : ${user_index:user_index}

#redis config
redis:
  host: ${redis_host:localhost}
  port: ${redis_port:6379}
  expires: ${redis_expires:3600}

#Audit config
audit:
  hcxIndex: ${hcx_index:hcx_audit}
  hcxAlias: ${hcx_alias:hcx_audit}
  onboardIndex: ${onboard_index:onboard_audit}
  onboardAlias: ${onboard_alias:onboard_audit}
  participantIndex: ${participant_index:participant_audit}
  participantAlias: ${participant_alias:participant_audit}
  userIndex: ${user_index:user_audit}
  userAlias: ${user_alias:user_audit}


#hcx redirect headers
redirect:
  headers:
    mandatory: ${redirect_mandatory_headers:x-hcx-sender_code, x-hcx-recipient_code, x-hcx-api_call_id, x-hcx-timestamp, x-hcx-correlation_id, x-hcx-status, x-hcx-redirect_to}
    optional: ${redirect_optional_headers:x-hcx-workflow_id}

#hcx config
hcx:
  instanceName: ${hcx_instance_name:swasth-hcx}
  urls:
    notallowed: ${not_allowed_urls:http://dev-hcx.swasth.app/api,http://staging-hcx.swasth.app/api}

#Notifications related configurations
notification:
  headers:
    mandatory: ${notification_mandatory_headers:alg, x-hcx-notification_headers, sender_code, timestamp, recipient_type, recipients}
    optional: ${notification_optional_headers:x-hcx-correlation_id, expiry}
  subscription:
    expiry: ${notification_subscription_expiry:100}
    allowedFilters: ${notification_subscription_allowedFilters:subscription_id, topic_code, subscription_status}
  networkPath: ${notification_networkPath:networkNotifications.yaml}
  participantPath: ${notification_participantPath:participantNotifications.yaml}
  workflowPath: ${notification_workflowPath:workflowNotifications.yaml}

tag: ${tag_name:}

#AWS S3 bucket
certificates:
  accesskey : ${certificates_accessKey:}
  secretKey : ${certificates_accessSecret:}
  bucketName : ${certificates_bucketName:}

keycloak:
  grant-type: ${grant_type:password}
  client-secret: ${client_secret:c4f23c80-96d1-4f39-9784-8a7cb1f61e7a}
  user-realm-url: ${user_realm_url:http://dev-hcx.swasth.app/auth/realms/swasth-hcx-users/protocol/openid-connect/token}
  user-client-id: ${user_client_id:registry-frontend}
  participant-realm-url: ${participant_realm_url:http://dev-hcx.swasth.app/auth/realms/swasth-hcx-participants/protocol/openid-connect/token}
  participant-client-id: ${participant_client_id:registry-frontend}
  protocol-api-access-realm-url: ${protocol_api_access_realm_url:http://dev-hcx.swasth.app/auth/realms/api-access/protocol/openid-connect/token}
  protocol-api-access-client-id: ${protocol_api_access_client_id:registry}
  user-realm-private-key-path: ${keycloak_user_realm_private_key_path:} 
  participant-realm-private-key-path: ${keycloak_participant_realm_private_key_path:}
  protocol-api-access-private-key-path: ${keycloak_protocol_api_access_realm_private_key_path:}
  admin-client-id: ${admin_cli_client_id:admin-cli}
  base-url: ${keycloak_base_url:https://dev-hcx.swasth.app/auth}
  admin-user: ${keycloack_admin_user_name:admin}
  admin-password: ${keycloak_admin_password:}
  protocol-access-realm: ${protocol_access_realm:api-access}
  master-realm: ${keycloak_master_realm:master}

email:
  id: ${email_id:}
  pwd: ${email_pwd:}
  user-token-subject: ${token_generate_subject:HCX - Protocol APIs Access Token Generation credentials}
  user-token-message: ${user_token_message:Hi <b>NAME</b>,<br/><br/> Along with participant username and password, api access token can be generated using the following credentials. <br/> <ul><li> user_name -  USER_ID </li> <li> secret - PASSWORD</li><li> participant_code - PARTICIPANT_CODE</li></ul> This API Access token can be used to make protocol API requests.  Please refer to the instructions provided in the <a href = "https://github.com/Swasth-Digital-Health-Foundation/hcx-platform/blob/main/docs/user-manuals/How%20to%20generate%20an%20access%20token%20to%20make%20use%20of%20protocol%20APIs/README.md">link</a> to generate access token. <br/><br/> If you have any queries, Please reach out HCX team.  <br/><br/> Thanks and Regards <br/> HCX Team.}
